package oop.collections.exercises;

import java.util.*;
/**
* You can find many more here:
* https://www.w3resource.com/java-exercises/collection/index.php
*/
public class SetExercise {
	/**
	* Write a function returning the intersection of two given sets 
	* (without using library functions)
	*/
	public static Set<Integer> intersectionManual(Set<Integer> first, Set<Integer> second) {
		/* TODO */
	}
	
	/**
	* Write a function returning the union of two given sets 
	* (without using library functions)
	*/
	public static Set<Integer> unionManual(Set<Integer> first, Set<Integer> second) {
		/* TODO */
	}
	
	/**
	* %*\textcolor{lincolngreen}{Write a function returning the intersection of two given sets (see retainAll())}*)
	*/
	public static Set<Integer> intersection(Set<Integer> first, Set<Integer> second) {
		/* TODO */
	}
	
	/**
	* %*\textcolor{lincolngreen}{Write a function returning the union of two given sets (see addAll())}*)
	*/
	public static Set<Integer> union(Set<Integer> first, Set<Integer> second) {
		/* TODO */
	}
	
	/**
	* Write a function to transform a set into a list without duplicates
	* Note well: collections can be created from another collection!
	*/
	public static List<Integer> toList(Set<Integer> source) {
		/* TODO */
	}
	
	/**
	* Write a function to remove duplicates from a list
	* Note well: collections can be created from another collection!
	*/
	public static List<Integer> removeDuplicates(List<Integer> source) {
		/* TODO */
	}
	
	/**
	* Write a function to remove duplicates from a list 
	* without using the constructors trick seen above
	*/
	public static List<Integer> removeDuplicatesManual(List<Integer> source) {
		/* TODO */
	}
	
	/**
	* Write a function accepting a string s
	* returning the first recurring character
	* For example firstRecurringCharacter("abaco") -> a.
	*/
	public static String firstRecurringCharacter(String s) {
		/* TODO */
	}
	
	/**
	* Write a function accepting a string s, 
	* and returning a set comprising all recurring characters.
	* For example allRecurringChars("mamma") -> [m, a].
	*/
	public static Set<Character> allRecurringChars(String s) {
		/* TODO */
	}
	
	/**
	* Write a function to transform a set into an array
	*/
	public static Integer[] toArray(Set<Integer> source) {
		/* TODO */
	}
	
	/**
	* Write a function to return the first item from a TreeSet
	* Note well: use TreeSet specific methods
	*/
	public static int getFirst(TreeSet<Integer> source) {
		/* TODO */
	}
	
	/**
	* Write a function to return the last item from a TreeSet
	* Note well: use TreeSet specific methods
	*/
	public static int getLast(TreeSet<Integer> source) {
		/* TODO */
	}
	
	/**
	* Write a function to get an element from a TreeSet 
	* which is strictly greater than a given element.
	* Note well: use TreeSet specific methods
	*/
	public static int getGreater(TreeSet<Integer> source, int value) {
		/* TODO */
	}
}