package oop.collections.exercises;
	
import java.util.*;
	
/**
* You can find many more here:
* https://www.w3resource.com/java-exercises/collection/index.php
*/
public class ListExercise {
	
	/**
	* Write a function to insert an element into a list at the beginning
	*/
	public static void insertFirst(ArrayList<Integer> list, int value) {
		/* TODO */
		for (int i = 0; i < list.size(); i++) {
		    list.set(i, list.get(i + 1));
		}
		list.set(0, value);
	}
	
	/**
	* Write a function to insert an element into a list at the end
	*/
	public static void insertLast(ArrayList<Integer> list, int value) {
		/* TODO */
		list.add(value);
	}
	
	/**
	* %*\textcolor{lincolngreen}{Write a function to replace the 3rd element of a list with a given value}*)
	*/
	public static void replace(ArrayList<Integer> list, int value) {
		/* TODO */
		list.set(2, value);
	}
	
	/**
	* Write a function to remove the 3rd element from a list
	*/
	public static void removeThird(ArrayList<Integer> list) {
		/* TODO */
		list.remove(2);
	}
	
	/**
	* Write a function to remove the element "666" from a list
	*/
	public static void removeEvil(ArrayList<Integer> list) {
		/* TODO */
		for (int i = 0; i < list.size(); i++) {
		    if (list.get(i) == 666) {
		        list.remove(i);
		    }
		}
	}
	
	/**
	* Write a function returning a ArrayList<Integer> containing
	* the first 10 square numbers (i.e., 1, 4, 9, 16, ...)
	*/
	public static ArrayList<Integer> generateSquare() {
		/* TODO */
		ArrayList<Integer> squares = new ArrayList<Integer> ();
		for (int i = 1; i <= 10; i++) {
		    squares.add(i * i);
		}
		return squares;
	}
	
	/**
	* Write a function to verify if a list contains a certain value
	*/
	public static boolean contains(ArrayList<Integer> list, int value) {
		/* TODO */
		for (int i = 0; i < list.size(); i++) {
		    if (list.get(i) == value) {
		        return true;
		    }
		}
		return false;
	}
	
	/**
	* %*\textcolor{lincolngreen}{Write a function to copy a list into another list (without using library functions)}*)
	* Note well: the target list must be emptied before the copy
	*/
	public static void copy(ArrayList<Integer> source, ArrayList<Integer> target) {
		/* TODO */
		if (target != null) {
		    target = null;
		}
		for (int i = 0; i < list.size(); i++) {
		    target.set(i, source.get(i));
		}
	}
	
	/**
	* Write a function to reverse the elements of a list
	*/
	public static void reverse(ArrayList<Integer> list) {
		/* TODO */
	}
	
	/**
	* %*\textcolor{lincolngreen}{Write a function to reverse the elements of a list (without using library functions)}*)
	*/
	public static void reverseManual(ArrayList<Integer> list) {
		/* TODO */
		for (int i = 0; i < list.size()/2; i++) {
		    int temp = list.get(i);
		    list.set(i, list.get(list.size() - 1 - i));
		    list.set(list.size() - 1 - i, temp);
		}
	}
	
	/**
	* Write a function to insert the same element both at the 
	* beginning and the end of the same LinkedList
	* Note well: you can use LinkedList specific methods
	*/
	public static void insertBeginningEnd(LinkedList<Integer> list, int value) {
		/* TODO */
		list.addFirst(value);
		list.addLast(value);
	}
}